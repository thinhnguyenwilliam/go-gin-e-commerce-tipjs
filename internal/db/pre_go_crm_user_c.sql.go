// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pre_go_crm_user_c.sql

package db

import (
	"context"
)

const getUserByEmailSQLC = `-- name: GetUserByEmailSQLC :one
SELECT usr_email, usr_id
FROM ` + "`" + `pre_go_crm_user_c` + "`" + `
WHERE usr_email = ?
LIMIT 1
`

type GetUserByEmailSQLCRow struct {
	UsrEmail string
	UsrID    uint32
}

func (q *Queries) GetUserByEmailSQLC(ctx context.Context, usrEmail string) (GetUserByEmailSQLCRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailSQLC, usrEmail)
	var i GetUserByEmailSQLCRow
	err := row.Scan(&i.UsrEmail, &i.UsrID)
	return i, err
}

const updateUserStatusByUserId = `-- name: UpdateUserStatusByUserId :exec
UPDATE ` + "`" + `pre_go_crm_user_c` + "`" + `
SET usr_status = ?, 
    usr_updated_at = ?
WHERE usr_id = ?
`

type UpdateUserStatusByUserIdParams struct {
	UsrStatus    bool
	UsrUpdatedAt int32
	UsrID        uint32
}

func (q *Queries) UpdateUserStatusByUserId(ctx context.Context, arg UpdateUserStatusByUserIdParams) error {
	_, err := q.db.ExecContext(ctx, updateUserStatusByUserId, arg.UsrStatus, arg.UsrUpdatedAt, arg.UsrID)
	return err
}
